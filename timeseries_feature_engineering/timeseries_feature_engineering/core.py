# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['add_lag_features', 'add_lag_percentage_gain_features', 'add_moving_average_features',
           'add_moving_average_percentage_gain_features', 'add_expanding_features', 'add_trend_features']

# Cell
def add_lag_features(df, field_name, prefix=None, lag_periods=[1]):
    "Helper function that adds lag features relevant to the column `field_name` of `df`."
    field = df[field_name]
    prefix = ifnone(prefix, field_name)
    for n in lag_periods: df[f'{prefix}-{n}p'] = df[field_name].shift(n)
    return df

# Cell
def add_lag_percentage_gain_features(df, field_name, prefix=None, lag_periods=[1]):
    "Helper function that adds lag percentage gain features relevant to the column `field_name` of `df`."
    field = df[field_name]
    prefix = ifnone(prefix, field_name)
    for n in lag_periods:
        df[f'{prefix}-{n}p_PG'] = df[field_name]/df[field_name].shift(n)
    return df



# Cell
def add_moving_average_features(df, field_name, prefix=None, windows=[3], weighted=True):
    "Helper function that adds moving average (rolling window) features relevant to the column `field_name` of `df`."
    field = df[field_name]
    prefix = ifnone(prefix, field_name)
    for n in windows:
        if weighted:
            weights = np.arange(1, n + 1)
            df[f'{prefix}_{n}p_MA'] = df[field_name].rolling(
                window=n).apply(lambda x: np.dot(x, weights) /
                                       weights.sum(), raw=True)
        else:
            df[f'{prefix}_{n}p_MA'] = df[field_name].rolling(window=n).mean()
    return df



# Cell
def add_moving_average_percentage_gain_features(df, field_name, prefix=None, windows=[3], weighted=True):
    "Helper function that adds moving average (rolling window) percentage gain features relevant to the column `field_name` of `df`."
    field = df[field_name]
    prefix = ifnone(prefix, field_name)
    for n in windows:
        if weighted:
            weights = np.arange(1, n + 1)
            df[f'{prefix}_{n}p_MA_PG'] = df[field_name]/df[field_name].rolling(
                window=n).apply(lambda x: np.dot(x, weights) /
                                       weights.sum(), raw=True)
        else:
            df[f'{prefix}_{n}p_MA_PG'] = df[field_name]/df[field_name].rolling(window=n).mean()
    return df



# Cell
def add_expanding_features(df, field_name, prefix=None, period=7):
    "Helper function that adds expanding features relevant to the column `field_name` of `df`."
    field = df[field_name]
    prefix = ifnone(prefix, field_name)
    for n in windows:
        df[f'{prefix}_{n}p_expanding'] = df[field_name].expanding(n).mean()
    return df



# Cell
def add_trend_features(df, field_name, prefix=None, windows=[3]):
    "Helper function that adds trend features relevant to the column `field_name` of `df`."
    field = df[field_name]
    prefix = ifnone(prefix, field_name)
    for n in windows:
        df[f'{prefix}_{n}p_trend'] = (df[field_name]
                .rolling(window=n)
                .mean()
                .diff()
                .fillna(0))
    return df